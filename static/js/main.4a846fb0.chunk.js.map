{"version":3,"sources":["Emoji.js","App.js","index.js"],"names":["Emoji","props","className","role","aria-label","label","aria-hidden","symbol","App","useState","input","setInput","userInputs","setUserInputs","isPalindrome","setIsPalindrome","isSentence","setIsSentence","isSubmited","setIsSubmited","result","userInput","React","useEffect","test","str","strArray","i","replace","toLowerCase","length","push","strReversed","j","join","palindrome","id","name","rows","cols","value","onChange","e","persist","target","onClick","preventDefault","setTimeout","style","color","ReactDOM","render","document","getElementById"],"mappings":"0OAWeA,EAVD,SAAAC,GAAK,OACf,sBACIC,UAAU,QACVC,KAAK,MACLC,aAAYH,EAAMI,MAAQJ,EAAMI,MAAQ,GACxCC,cAAaL,EAAMI,MAAQ,QAAU,OAJzC,SAMKJ,EAAMM,U,MCwFAC,MA5Ff,WAAgB,IAAD,EACaC,mBAAS,qBADtB,mBACNC,EADM,KACCC,EADD,OAEuBF,mBAAS,IAFhC,mBAENG,EAFM,KAEMC,EAFN,OAI2BJ,oBAAS,GAJpC,mBAINK,EAJM,KAIQC,EAJR,OAKuBN,oBAAS,GALhC,mBAKNO,EALM,KAKMC,EALN,OAOuBR,oBAAS,GAPhC,mBAONS,EAPM,KAOMC,EAPN,KAUTC,GAAS,EAwCTC,EAAY,GAgBhB,OAfAC,IAAMC,WAAU,WAGdN,EAAc,SAASO,KADvBH,GAAwBX,IA1C1B,SAAoBe,GAYlB,IADA,IAAIC,EAAW,GACNC,GALTF,EAAMA,EAAIG,QAAQ,iBAAkB,IAAIC,eAKvBC,OAAS,EAAGH,GAAK,EAAGA,IACnCD,EAASK,KAAKN,EAAIE,IAKpB,IADA,IAAIK,EAAc,GACTC,EAAI,EAAGA,EAAIR,EAAIK,OAAQG,IAC9BD,EAAYD,KAAKN,EAAIQ,IAInBP,EAASQ,KAAK,MAAQF,EAAYE,KAAK,KAGzCnB,EAFAK,GAAS,GAKXL,EAAgBK,GAehBe,CAAWd,GAEXR,EAAcQ,KACb,CAACX,IASF,sBAAK0B,GAAG,MAAR,UACE,oDAEA,iCACE,qDACA,uBACA,0BAAUA,GAAG,WAAWC,KAAK,WAAWC,KAAK,IAAIC,KAAK,KAAKC,MAAO9B,EAAO+B,SA5B1D,SAAAC,GACnBA,EAAEC,UACFhC,EAAS,GAAD,OAAI+B,EAAEE,OAAOJ,WA2BjB,uBACA,wBAAQJ,GAAG,aAAaS,QAfX,SAAAH,GACjBA,EAAEI,iBACF3B,GAAc,GACd4B,YAAW,WAAO5B,GAAc,KAAS,MAYrC,oBACCD,EACG,mBAAGkB,GAAG,aAAN,SAAmC,KAAfxB,EAClB,2EAA6C,cAAC,EAAD,CAAOL,OAAO,oBAC3DS,EACE,qDACc,IAAjBF,EAAwB,sBAAMkC,MAAO,CAACC,MAAO,SAArB,4BAAuD,sBAAMD,MAAO,CAACC,MAAO,OAArB,mCAC5E,iDACc,IAAjBnC,EAAwB,sBAAMkC,MAAO,CAACC,MAAO,SAArB,4BAAuD,sBAAMD,MAAO,CAACC,MAAO,OAArB,qCAEhF,QAEN,2BCtFNC,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.4a846fb0.chunk.js","sourcesContent":["import React from 'react';\r\nconst Emoji = props => (\r\n    <span\r\n        className=\"emoji\"\r\n        role=\"img\"\r\n        aria-label={props.label ? props.label : \"\"}\r\n        aria-hidden={props.label ? \"false\" : \"true\"}\r\n    >\r\n        {props.symbol}\r\n    </span>\r\n);\r\nexport default Emoji;","import React, { useState } from 'react'\nimport Emoji from './Emoji'\nimport './App.css';\n\nfunction App() {\n  const [input, setInput] = useState('I am a palindrome')\n  const [userInputs, setUserInputs] = useState('')\n\n  const [isPalindrome, setIsPalindrome] = useState(false)\n  const [isSentence, setIsSentence] = useState(true)\n\n  const [isSubmited, setIsSubmited] = useState(false)\n\n  // Palindrome\n  let result = false;\n  function palindrome(str) {\n\n    /**\n     * Replaces any special character, underscore or white space with empty character\n     * and makes whole string lowercase.\n     * This way it's way more easier to work with string\n     */\n    str = str.replace(/[^A-Za-z0-9]/gi, '').toLowerCase();\n    // Done replacing\n\n    // same str\n    let strArray = [];\n    for (let i = str.length - 1; i >= 0; i--) {\n      strArray.push(str[i]);\n    }\n\n    // reversed str\n    let strReversed = [];\n    for (let j = 0; j < str.length; j++) {\n      strReversed.push(str[j]);\n    }\n\n    //  Comparing str and reversed str\n    if (strArray.join('') === strReversed.join('')) {\n      result = true;\n      // console.log('Palindrome')\n      setIsPalindrome(result)\n    }\n    // console.log('Not palindrome')\n    setIsPalindrome(result);\n  }\n\n  // Palindrome\n\n  const handleChange = e => {\n    e.persist()\n    setInput(`${e.target.value}`)\n  }\n\n  let userInput = ''\n  React.useEffect(() => {\n    //eslint-disable-next-line\n    userInput = userInput + input\n    setIsSentence(/^\\w+\\s/.test(userInput))\n    palindrome(userInput)\n\n    setUserInputs(userInput)\n  }, [input]);\n\n  const submitFunc = e => {\n    e.preventDefault()\n    setIsSubmited(true)\n    setTimeout(() => {setIsSubmited(false)}, 1000)\n  }\n\n  return (\n    <div id=\"App\">\n      <h1>Palindrome Checker</h1>\n\n      <form>\n        <label>Enter your text:</label>\n        <br />\n        <textarea id=\"textarea\" name=\"textarea\" rows=\"4\" cols=\"45\" value={input} onChange={handleChange} />\n        <br />\n        <button id=\"submit-btn\" onClick={submitFunc}>Submit</button>\n        {isSubmited\n          ? <p id=\"palindrome\">{userInputs === ''\n            ? <span>Is whitespace palindrome? I don't know <Emoji symbol=\"😁\" /></span>\n            : isSentence\n              ? <span>Your sentence is\n            {isPalindrome === true ? <span style={{color: 'green'}}> a palindrome!</span> : <span style={{color: 'red'}}> not a palindrome!</span>}</span>\n              : <span>Your word is\n            {isPalindrome === true ? <span style={{color: 'green'}}> a palindrome!</span> : <span style={{color: 'red'}}> not a palindrome!</span>}</span>}\n          </p>\n          : null}\n      </form>\n      <br />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));"],"sourceRoot":""}